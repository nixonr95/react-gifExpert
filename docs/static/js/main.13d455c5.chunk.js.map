{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","prototypes","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oNAGMA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAElB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACI,uBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKlB,eACG,uBACKO,KAAK,OACLC,MAAQT,EACRU,SAnBc,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,cAwBhCZ,EAAYe,WAAa,CACrBd,cAAee,IAAUC,KAAKC,YAGnBlB,Q,+BClCDmB,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACdC,EADc,iDACiCC,UAAUH,GAD3C,+DAEDI,MAAMF,GAFL,cAEdG,EAFc,gBAGCA,EAAKC,OAHN,uBAGbC,EAHa,EAGbA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATtB,kBAabM,GAba,4CAAH,sDCUNO,EAVK,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAE7B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IADxB,KAEI,kCAAKA,EAAL,WC6BGO,EA/BC,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SASd,ECVwB,SAACA,GACzB,MAA0BlB,mBAAS,CAC/ByB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAsBA,OAjBAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAM,SAAAC,GACKH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAG/B,CAACpB,IASIqB,EDbwBK,CAAa1B,GAAhCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAGpB,OACI,qCACI,mCAAMpB,EAAN,OACCoB,GAAW,mBAAGJ,UAAU,mCAAb,wBACZ,qBAAKA,UAAU,YAAf,SAGIH,EAAOJ,KAAK,SAAAC,GAAG,OACX,aADkB,CACjB,EAAD,eAEQA,GADCA,EAAIC,aEOlBgB,EA7BM,WAEjB,MAAoC7C,mBAAS,CAAC,cAA9C,mBAAO8C,EAAP,KAAmB/C,EAAnB,KAOA,OACI,qCACA,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,qCAEQ+C,EAAWnB,KAAK,SAAAT,GAEZ,OAAO,cAAC,EAAD,CAAyBA,SAAWA,GAAtBA,a,MCnBzC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.13d455c5.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) =>{   //la e es el nombre que se le pone al evento\r\n         setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault(); // e.preventDefault() se usa para que no se recargue la pagina al dar enter\r\n\r\n        if (inputValue.trim().length > 2){   // el trim() borra los espacios y si es mayor de 2 letras se cumple la condicion\r\n            \r\n            setCategories(cats => [inputValue, ...cats]);  //se pone ésta para en cats hacer al call back y traer los elementos del arreglo categorias\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>  {/* en el for es para enviar los formularios completos al hacer enter */}\r\n           <input\r\n                type=\"text\"\r\n                value= {inputValue}\r\n                onChange={handleInputChange}\r\n           />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.prototypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory","\r\n\r\n export const getGifs = async (category) =>{\r\n    const url= `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=U3SW939ZII8lyADYooKpeA235KixhSXa`;  //encodeURI arregla espacios y los cambia por + ...etc\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json(); //la respuesta es un .json por eso toca con .json se desestructura porque se quiere la data que hay dentro de la data\r\n    \r\n    const gifs = data.map( img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url     //se le pone signo de interrogacion para preguntarle que si viene la imagen si la utilice\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nconst GifGridItem = ({id, title, url}) => {\r\n    // console.log(id, title, url);\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={url} alt={title} />  {/* se le pone el alt por buena practica */}\r\n            <p> {title} </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem","import React, { useEffect, useState } from 'react'\r\nimport { getGifs } from '../helpers/GetGifs';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n    // const [images, setImages] = useState([]);\r\n\r\n    // useEffect(() =>{  //el useEffect se usa para que no esté haciendo cada rato la peticion http y no haga un bucle infinito (solo se renderiza una vez)\r\n    //     getGifs(category)\r\n    //         .then(setImages);\r\n    // }, [category]) // cuando se deja el getGifs en el mismo script no es necesario poner category en esta linea\r\n\r\n    const {data:images, loading} = useFetchGifs(category);  //se pone data:images para renombrar data como images\r\n   \r\n\r\n    return (\r\n        <>\r\n            <h3> {category} </h3>\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n            <div className=\"card-grid\">\r\n\r\n            {\r\n                images.map( img => (  //se pede desestructurando adentro {id, title} en vez de img y abajo  se llama cada item\r\n                    <GifGridItem \r\n                        key={img.id}\r\n                        {...img}  //se desestructura cada item de img y se envian por separado\r\n                    />\r\n                ) )\r\n            }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n\r\n\r\n\r\n// return (\r\n//     <>\r\n//         <h3> {category} </h3>\r\n//         {loading?'cargando...': 'data cargada'}\r\n        // <div className=\"card-grid\">\r\n        //     {/* <ol>\r\n        //         {\r\n        //             images.map( img => (  //se pede desestructurando adentro {id, title} en vez de img y abajo  se llama cada item\r\n        //                 <li key={img.id}> {img.title} </li>\r\n        //             ) )\r\n        //         }\r\n        //     </ol> */}\r\n\r\n        //     {\r\n        //         images.map( img => (  //se pede desestructurando adentro {id, title} en vez de img y abajo  se llama cada item\r\n        //             <GifGridItem \r\n        //                 key={img.id}\r\n        //                 {...img}  //se desestructura cada item de img y se envian por separado\r\n        //             />\r\n        //         ) )\r\n        //     }\r\n        // </div>\r\n//     </>\r\n// )","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/GetGifs\";\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then( imgs =>{            \r\n                        setstate({\r\n                            data: imgs,\r\n                            loading: false\r\n                        })\r\n            });\r\n    },[category])\r\n\r\n    // setTimeout(() =>{\r\n    //     setstate({\r\n    //         data: [1,2,3,4,5],\r\n    //         loading: false\r\n    //     })\r\n    // },3000);\r\n\r\n    return state; //{data:[], loading: true};\r\n}\r\n","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () =>{\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // const handleAdd = () =>{\r\n    //     // setcategories(cats => [...cats, 'Naruto']);  //otra forma de hacerlo\r\n    //     setcategories([...categories, 'Naruto']); //los tres puntos (...) es para mantener los datos que tiene categories\r\n    // }\r\n\r\n    return(\r\n        <>\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setCategories={setCategories}/>\r\n        <hr/>\r\n\r\n        \r\n\r\n        <ol>   {/* ol es orden list (lista ordenada) */}\r\n            {\r\n                categories.map( category => {  //el .map sirve para sacar cada valor del arreglo\r\n                    // return <li key={category}> {category} </li>  //era para sacar todos los valores del arreglo cuando habian varios\r\n                    return <GifGrid key={category}  category= {category} />\r\n                })\r\n            }\r\n        </ol>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}